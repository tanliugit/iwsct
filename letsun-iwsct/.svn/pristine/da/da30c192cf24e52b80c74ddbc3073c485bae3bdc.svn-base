package com.letsun.iwsct.itface.controller;

import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.locks.ReentrantLock;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.collections.CollectionUtils;
import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.alibaba.fastjson.JSONObject;
import com.baomidou.mybatisplus.mapper.EntityWrapper;
import com.baomidou.mybatisplus.mapper.Wrapper;
import com.letsun.iwsct.itface.common.CommonUtil;
import com.letsun.iwsct.itface.common.LotteryUtil;
import com.letsun.iwsct.itface.domain.Tcorp;
import com.letsun.iwsct.itface.domain.TcorpArea;
import com.letsun.iwsct.itface.domain.Tfans;
import com.letsun.iwsct.itface.domain.TlotteryActivity;
import com.letsun.iwsct.itface.domain.TlotteryBuyer;
import com.letsun.iwsct.itface.domain.TlotteryPrize;
import com.letsun.iwsct.itface.domain.TlotteryRecord;
import com.letsun.iwsct.itface.domain.Tposition;
import com.letsun.iwsct.itface.domain.Tresume;
import com.letsun.iwsct.itface.model.Gift;
import com.letsun.iwsct.itface.service.TcorpAreaService;
import com.letsun.iwsct.itface.service.TcorpService;
import com.letsun.iwsct.itface.service.TfansService;
import com.letsun.iwsct.itface.service.TlotteryActivityService;
import com.letsun.iwsct.itface.service.TlotteryBuyerService;
import com.letsun.iwsct.itface.service.TlotteryPrizeService;
import com.letsun.iwsct.itface.service.TlotteryRecordService;
import com.letsun.iwsct.itface.service.TpositionService;
import com.letsun.iwsct.itface.service.TresumeService;
import com.letsun.iwsct.itface.service.TweblookPvuvService;

@Controller
@RequestMapping("w/crossDomain")
public class WxCrossDomainController extends BaseController {
	
	private final ReentrantLock lock = new ReentrantLock();
	
	@Autowired
	private TcorpService tcorpService;
	
	@Autowired
	private TcorpAreaService tcorpAreaService;

	@Autowired
	private TpositionService tpositionService;

	@Autowired
	private TfansService tfansService;

	@Autowired
	private TresumeService tresumeService;

	@Autowired
	private TweblookPvuvService tweblookPvuvService;
	
	@Autowired
	private TlotteryBuyerService tlotteryBuyerService;
	
	@Autowired
	private TlotteryRecordService tlotteryRecordService;
	
	@Autowired
	private TlotteryActivityService tlotteryActivityService;
	
	@Autowired
	private TlotteryPrizeService tlotteryPrizeService;

	/**
	 * 2018-4-1 add by tanliu 异步提交 投递简历 get方式提交 用于外部跨域访问
	 * */
	@SuppressWarnings("finally")
	@RequestMapping(value = "/submitData/{corpid}/{areaid}/{positionid}")
	@ResponseBody
	public String jsonpcallback(ModelMap model, HttpServletRequest request,
			@PathVariable java.lang.Long corpid, @PathVariable Long areaid,
			@PathVariable Long positionid, HttpServletResponse response)
			throws Exception {
		response.setContentType("text/plain; charset=UTF-8");
		response.setCharacterEncoding("UTF-8");

		String status = "false";
		String msg = "提交失败";
		String callback = request.getParameter("submitDataback");

		TcorpArea tArea = tcorpAreaService.selectById(areaid);
		if (tArea == null) {
			msg = "数据出错！";
			response.getWriter().print(
					callback + "({'status':'" + status + "','msg':'" + msg
							+ "'})");
			return null;
		}

		
		Tposition tposition = tpositionService.selectById(positionid);
		if (tposition == null) {
			msg = "数据出错！";
			response.getWriter().print(
					callback + "({'status':'" + status + "','msg':'" + msg
							+ "'})");
			return null;
		}

		String candidate = request.getParameter("candidate");
		String idnumber = request.getParameter("idnumber");
		String mobile = request.getParameter("mobile");

		// 备用字段
		String content = request.getParameter("content");
		String remarks = request.getParameter("remarks");

		// 专业
		String specialty = request.getParameter("specialty");
		// 年级
		String grade = request.getParameter("grade");
		// 学校
		String school = request.getParameter("school");
		// 籍贯
		String hail = request.getParameter("hail");
		// email
		String email = request.getParameter("email");
		String type = request.getParameter("type");
		String hunterOpenid = request.getParameter("hunterOpenid");
		String uncheckRepeat = request.getParameter("uncheckRepeat");

		String age = request.getParameter("age");
		String sex = request.getParameter("sex");
		String education = request.getParameter("education");

		Long ageLong = (age == null || "".contains(age)) ? 0L : Long
				.parseLong(age);

		// 更新粉丝关联数据
		String fansid = request.getParameter("fansid");
		if (StringUtils.isNotBlank(fansid) && !StringUtils.equals(type, "-1")) {
			Tfans fans = tfansService.selectById(Long.valueOf(fansid));
			if (fans != null) {
				fans.setShopid(positionid.intValue());
				// fans.setHelpscore(0);
				// fans.setHelpnum(0);
				tfansService.updateById(fans);
			}
		}
		if (StringUtils.equals(type, "-1")) {
			type = "";
		}

		if (!StringUtils.equals(uncheckRepeat, "2")) {

			if (StringUtils.isAllBlank(candidate, idnumber, mobile)) {
				response.getWriter().print(
						callback + "({'status':'" + status
								+ "','msg':'输入数据不完整！'})");
				return null;
			}
		}

		try {
			if (!StringUtils.equals(uncheckRepeat, "1")
					&& !StringUtils.equals(uncheckRepeat, "2")) {
				// 判断企业统一岗位 同一手机号是否已提交过
				if (mobile != null) {
					Map<String, Object> paramsMap = new LinkedHashMap<String, Object>();
					paramsMap.put("corpid", corpid);
					paramsMap.put("positionid", positionid);
					paramsMap.put("mobile", mobile);
					paramsMap.put("status", 1);

					List<Tresume> listResume = tresumeService
							.selectByMap(paramsMap);
					// List<Tresume> listResume = (List<Tresume>)
					// tresumeService.findAllByPropertyes(Tresume.class,
					// paramsMap);
					if (listResume.size() > 0) {
						// map.put("msg", "此岗位，同一身份证号已经提交了应聘信息");
						msg = "同一手机号已经提交过了";
						response.getWriter().print(
								callback + "({'status':'" + status
										+ "','msg':'" + msg + "'})");
						return null;
					}
				}
			}

			if (StringUtils.equals(uncheckRepeat, "2")) {
				Map<String, Object> paramsMap = new HashMap<String, Object>();
				paramsMap.put("status", 1);
				paramsMap.put("corpid", corpid);
				paramsMap.put("fansid", Long.parseLong(fansid));
				// List<Tresume> resumeList = (List<Tresume>)
				// this.tresumeManager.findAllByPropertyes(Tresume.class,
				// paramsMap);
				List<Tresume> resumeList = (List<Tresume>) tresumeService
						.selectByMap(paramsMap);
				if (!CollectionUtils.isEmpty(resumeList)) {
					Tresume resumeUpdate = resumeList.get(0);
					String origContent = resumeUpdate.getContent();
					origContent = origContent == null ? "" : origContent;
					origContent += content;
					resumeUpdate.setContent(origContent);
					if (StringUtils.isNotBlank(remarks)) {
						resumeUpdate.setRemarks(encodingCharset(remarks));
					}
					this.tresumeService.updateById(resumeUpdate);
				} else {

					this.saveTresume(corpid, areaid, positionid, candidate,
							idnumber, mobile, content, remarks, specialty,
							grade, school, hail, email, type, fansid, ageLong,
							sex, education);
				}
			} else {
				this.saveTresume(corpid, areaid, positionid, candidate,
						idnumber, mobile, content, remarks, specialty, grade,
						school, hail, email, type, fansid, ageLong, sex,
						education);
			}

			long count = 0;
			if (StringUtils.isNotBlank(hunterOpenid)) {
				String ip = getIpAddr();
				count = this.tweblookPvuvService.savePvuvForUrl2(ip, corpid,
						hunterOpenid, "data");
			}

			msg = "提交成功";
			status = "true";
			response.getWriter().print(
					callback + "({'status':'" + status + "','msg':'" + msg
							+ "', 'count':'" + count + "'})");
			return null;
		} catch (Exception e) {
			e.printStackTrace();
			response.getWriter().print(
					callback + "({'status':'" + status + "','msg':'" + msg
							+ "', 'count':'-1'})");
		} finally {
			return null;
		}
	}
	

	/** 2016-8-27 add by wayne 
	 * 异步提交   查询抽奖人信息--get方式提交  用于外部跨域访问
	 * */
	@SuppressWarnings("finally")
	@RequestMapping(value="/querylottly/{corpid}/{wxno}/{mytoken}")
	@ResponseBody
	public String querylottly(ModelMap model, 
			HttpServletRequest request,
			@PathVariable java.lang.Long corpid,
			@PathVariable java.lang.String wxno,
			@PathVariable java.lang.String mytoken,
			HttpServletResponse response) throws Exception {
	
		response.setContentType("text/plain; charset=UTF-8");
		response.setCharacterEncoding("UTF-8");
	  
		Map<Object,Object> mapmsg = new HashMap<Object, Object>();
		String status="false";
		String msg="提交失败";
		String callback=request.getParameter("querylottlyback");  
		
		if(!chenckCorp(mapmsg, request, corpid)) {
			
			response.getWriter().print(callback + "({'status':'"+status+"','msg':'"+mapmsg.get("msg")+"'})");  
			return null;
		}

		if(CommonUtil.isNull(wxno, mytoken)){
			response.getWriter().print(callback + "({'status':'"+status+"','msg':'参数出错！'})");  
			return null;
		}
		
		//验证参数是否合法
		if(!CommonUtil.hash(wxno+"wnzlxcy").equals(mytoken)){
			response.getWriter().print(callback + "({'status':'"+status+"','msg':'参数出错！'})");  
			return null;
		}
		
		//抽奖总人数
		int lotteryNum=0;
		
		try{
			//查询获抽奖总人数
			Map<String,Object> paramMap = new HashMap<String,Object>();
			
			paramMap.put("corpid", corpid);
			List<TlotteryBuyer> listNum=tlotteryBuyerService.selectByMap(paramMap);
			
			/*List<TlotteryBuyer> listNum=tlotteryBuyerManager.findAllBy("corpid", corpid);*/
			if(listNum!=null && listNum.size()>0){
				lotteryNum=listNum.size();
			}
			
			
			//查询获取的openid 是否抽过奖
			TlotteryBuyer buyer=tlotteryBuyerService.getBuyer(wxno, corpid);
			if(buyer!=null && buyer.getTotal()>=1){
				//是否中奖
				
				Wrapper<TlotteryRecord> wrapper = new EntityWrapper<TlotteryRecord>();
				wrapper.eq("buyerid", buyer.getId());
				
				List<TlotteryRecord> listRecord = this.tlotteryRecordService.selectList(wrapper);
				//List<TlotteryRecord> listRecord = recordManager.findAllBy("buyerid", buyer.getId());
				if(listRecord!=null && listRecord.size()>0){
					//model.addAttribute("tRecord", listRecord.get(0));
					response.getWriter().print(callback + "({'status':'2','msg':'您已中过奖！','lotteryNum':'"+lotteryNum+"'})");  
					return null;
				}
				
				response.getWriter().print(callback + "({'status':'-1','msg':'已抽过奖！','lotteryNum':'"+lotteryNum+"'})"); 
				return null;
			}
			
			//奖项规则
			List<TlotteryActivity> activityList = this.tlotteryActivityService.queryActivityList(corpid);
			TlotteryActivity activity = new TlotteryActivity();
			
			//判断活动是否存在
			if(activityList.size() >0){
				activity = activityList.get(0);
			}else{
				response.getWriter().print(callback + "({'status':'0','msg':'暂无抽奖活动！','lotteryNum':'"+lotteryNum+"'})"); 
				return null;
			}
			
			List<TlotteryPrize> prizeList = tlotteryPrizeService.getlistPrizeForlotteryid(activity.getId());
			if(prizeList==null || prizeList.size()==0){
				response.getWriter().print(callback + "({'status':'0','msg':'暂无抽奖活动！','lotteryNum':'"+lotteryNum+"'})"); 
				return null;
			}
		
			msg="没有抽过奖！";
			status="1";
			
			response.getWriter().print(callback + "({'status':'"+status+"','msg':'"+msg+"','lotteryNum':'"+lotteryNum+"'})"); 
			return null;
			
		}catch (Exception e) {
			response.getWriter().print(callback + "({'status':'"+status+"','msg':'"+msg+"','lotteryNum':'"+lotteryNum+"'})"); 
		}finally{
			return null;   
		}
	}
	
	
	
	/** 2016-8-27 add by wayne 
	 * 异步提交   抽奖 --get方式提交  用于外部跨域访问
	 * */
	@SuppressWarnings("finally")
	@RequestMapping(value="/lottly/{corpid}/{wxno}/{mytoken}")
	@ResponseBody
	public String lottly(ModelMap model, 
			HttpServletRequest request,
			@PathVariable java.lang.Long corpid,
			@PathVariable java.lang.String wxno,
			@PathVariable java.lang.String mytoken,
			HttpServletResponse response) throws Exception {
	
		response.setContentType("text/plain; charset=UTF-8");
		response.setCharacterEncoding("UTF-8");
	  
		Map<Object,Object> mapmsg = new HashMap<Object, Object>();
		String status="false";
		String msg="提交失败";
		String callback=request.getParameter("lottlyDataback");  
		
		if(!chenckCorp(mapmsg, request, corpid)) {
			
			response.getWriter().print(callback + "({'status':'"+status+"','msg':'"+mapmsg.get("msg")+"'})");  
			return null;
		}

		if(CommonUtil.isNull(wxno, mytoken)){
			response.getWriter().print(callback + "({'status':'"+status+"','msg':'参数出错！'})");  
			return null;
		}
		
		//验证参数是否合法
		if(!CommonUtil.hash(wxno+"wnzlxcy").equals(mytoken)){
			response.getWriter().print(callback + "({'status':'"+status+"','msg':'参数出错！'})");  
			return null;
		}
		
		try{
			lock.lock(); 
			
			
			//奖项规则
			List<TlotteryActivity> activityList = this.tlotteryActivityService.queryActivityList(corpid);
			/*List<TlotteryActivity> activityList = activityManager.queryActivityList(corpid);*/
			TlotteryActivity activity = new TlotteryActivity();
			
			//判断活动是否存在
			if(activityList.size() >0){
				activity = activityList.get(0);
			}else{
				response.getWriter().print(callback + "({'status':'0','msg':'暂无抽奖活动！'})");  
				return null;
			}
			
			List<TlotteryPrize> prizeList = this.tlotteryPrizeService.getlistPrizeForlotteryid(activity.getId());
			//List<TlotteryPrize> prizeList = tlotteryPrizeManager.getlistPrizeForlotteryid(activity.getId());
			if(prizeList==null || prizeList.size()==0){
				response.getWriter().print(callback + "({'status':'0','msg':'暂无抽奖活动！'})");  
				return null;
			}
			
			//判断该wxno 是否存在
			TlotteryBuyer buyer= this.tlotteryBuyerService.getBuyer(wxno, corpid);
			//TlotteryBuyer buyer=tlotteryBuyerManager.getBuyer(wxno, corpid);
			if(buyer!=null){
				buyer.setTotal(buyer.getTotal()+1);
				tlotteryBuyerService.updateById(buyer);
			}else{
				//保存抽奖人信息
				buyer = new TlotteryBuyer();
				buyer.setCorpid(corpid);
				buyer.setWxno(wxno);
				buyer.setStatus(1);
				buyer.setTotal(1);
				buyer.setCreateDate(new Date());
				tlotteryBuyerService.insert(buyer);
			}
			
			//抽奖方法
			TlotteryPrize prize=get_lotteryPrize(activity.getId());
			//抽奖记录对象
			TlotteryRecord tlotteryRecord = new TlotteryRecord();
			tlotteryRecord.setCorpid(corpid);
			//中奖
			if(prize!=null){
				//奖品   中奖数量+1   修改奖品数量
				prize.setTotal((prize.getTotal()!=null)?prize.getTotal()+1:1);
				//tlotteryPrizeManager.merge(prize);
				
				this.tlotteryPrizeService.updateById(prize);
				//新增中奖记录
				tlotteryRecord.setStatus(1);
				tlotteryRecord.setLotteryid(activity.getId());
				tlotteryRecord.setPrizeid(prize.getId());
				tlotteryRecord.setBuyerid(buyer.getId());
				tlotteryRecord.setCreateDate(new Date());
				
				this.tlotteryRecordService.insert(tlotteryRecord);
				
				response.getWriter().print(callback + "({'status':'1','msg':'"+tlotteryRecord.getId()+"','level':'"+prize.getLevel()+"'})");    
				return null;  
			}else{
				response.getWriter().print(callback + "({'status':'-1','msg':'很遗憾，您没有中奖！'})");    
				return null;  
			}
		}catch (Exception e) {
			response.getWriter().print(callback + "({'status':'"+status+"','msg':'"+msg+"'})");    
			//return null;   
		}finally{
			if (lock.isLocked()) {
				lock.unlock();
			}
			
			return null;   
		}
		
	}
	
	
	
	
	/** 2016-8-27 add by wayne 
	 * 异步提交   查询抽奖人信息--get方式提交  用于外部跨域访问
	 * */
	@SuppressWarnings("finally")
	@RequestMapping(value="/submitBuyer/{corpid}/{recordid}")
	@ResponseBody
	public String submitBuyer(ModelMap model, 
			HttpServletRequest request,
			@PathVariable java.lang.Long corpid,
			@PathVariable java.lang.Long recordid,
			HttpServletResponse response) throws Exception {
	
		response.setContentType("text/plain; charset=UTF-8");
		response.setCharacterEncoding("UTF-8");
	  
		Map<Object,Object> mapmsg = new HashMap<Object, Object>();
		String status="false";
		String msg="提交失败";
		String callback=request.getParameter("submitBuyerback");  
		
		if(!chenckCorp(mapmsg, request, corpid)) {
			
			response.getWriter().print(callback + "({'status':'"+status+"','msg':'"+mapmsg.get("msg")+"'})");  
			return null;
		}

		if(CommonUtil.isNull(recordid)){
			response.getWriter().print(callback + "({'status':'"+status+"','msg':'参数出错'})");  
			return null;
		}
		
		//查询中奖记录信息	
		
		TlotteryRecord tRecord=this.tlotteryRecordService.selectById(recordid);
		//TlotteryRecord tRecord=recordManager.getById(recordid);
		if(tRecord==null || tRecord.getBuyerid()==null){
			response.getWriter().print(callback + "({'status':'"+status+"','msg':'没有您的中奖记录信息，请先参加我们的活动！'})");  
			return null;
		}
		
		//中奖后的表单提交
		String candidate = request.getParameter("candidate");
		String mobile = request.getParameter("mobile");
		String remark = request.getParameter("remark");
		String address = request.getParameter("address");
		
		if(CommonUtil.isNull(candidate,remark,mobile)){
			response.getWriter().print(callback + "({'status':'"+status+"','msg':'输入数据不完整！'})");  
			return null;
		}
	
		try{
			//更新获奖人信息	
			//TlotteryBuyer buyer = tlotteryBuyerManager.getById(tRecord.getBuyerid());
			
			TlotteryBuyer buyer = this.tlotteryBuyerService.selectById(tRecord.getBuyerid());
			buyer.setName(candidate);
			buyer.setMobile(mobile);
			buyer.setRemark(remark);
			buyer.setAddress(address!=null?address:"");
			
			this.tlotteryBuyerService.updateById(buyer);
			//tlotteryBuyerManager.update(buyer);
			
			response.getWriter().print(callback + "({'status':'1','msg':'提交成功'})");    
			return null; 
		}catch (Exception e) {
			response.getWriter().print(callback + "({'status':'"+status+"','msg':'"+msg+"'})");    
		}finally{
			return null;  
		}
	}
	
	
	
	
	/** 2016-10-1 add by wayne 
	 * 异步查询是否提交过资料  get方式提交  用于外部跨域访问
	 * */
	@SuppressWarnings({ "unchecked", "finally" })
	@RequestMapping(value="/queryResume/{corpid}/{fansid}")
	@ResponseBody
	public String queryResume(ModelMap model, 
			HttpServletRequest request,
			@PathVariable java.lang.Long corpid,
			@PathVariable Long fansid,
			HttpServletResponse response, String type) throws Exception {
	
		response.setContentType("text/plain; charset=UTF-8");
		response.setCharacterEncoding("UTF-8");
	  
		Map<Object,Object> mapmsg = new HashMap<Object, Object>();
		String status="false";
		String msg="查询失败";
		String callback=request.getParameter("queryResumeback");  
		

		if(!chenckCorp(mapmsg, request, corpid)) {
			response.getWriter().print(callback + "({'status':'"+status+"','msg':'"+mapmsg.get("msg")+"'})");  
			return null;
		}
		
		Tfans fans= this.tfansService.selectById(fansid);
		//Tfans fans= tfansManager.getById(fansid);
		if(fans==null){
			msg="数据出错！";
			response.getWriter().print(callback + "({'status':'"+status+"','msg':'"+msg+"'})");  
			return null;
		}
		
		try{
			//判断fans是否已提交过
			Map<String, Object> paramsMap = new LinkedHashMap<String, Object>();
			paramsMap.put("corpid", corpid);
			paramsMap.put("fansid", fansid);
			if (StringUtils.isNotBlank(type)) {
				paramsMap.put("education", type);
			}
			paramsMap.put("status", 1);
			//List<Tresume> listResume = (List<Tresume>) tresumeManager.findAllByPropertyes(Tresume.class, paramsMap);
			
			List<Tresume> listResume = this.tresumeService.selectByMap(paramsMap);
			if(listResume.size()>0){
				//map.put("msg", "此岗位，同一身份证号已经提交了应聘信息");
				msg="已经提交过了";
				
				Long positionId = listResume.get(0).getPositionid();
				
				Tposition position = this.tpositionService.selectById(positionId);
				
				String positionName = position != null ? position.getPositionname() : "";
				
				response.getWriter().print(callback + "({'status':'-1','msg':'"+listResume.get(0).getRemarks()+"','fans':'"+ JSONObject.toJSON(fans)+
						"','cityid':'"+positionId+"','city':'"+positionName+
						"','name':'"+listResume.get(0).getCandidate()+"','content': '"+ listResume.get(0).getContent() +"'})");  
				return null;
			}else{
				msg="查询成功:没有提交过资料！";
				status="1";
				response.getWriter().print(callback + "({'status':'"+status+"','msg':'"+msg+"','fans':'"+ JSONObject.toJSON(fans)+"'})");    
				return null;  
			}
		}catch (Exception e) {
			// TODO: handle exception
			response.getWriter().print(callback + "({'status':'"+status+"','msg':'"+msg+"'})");    
		}finally{
			return null;   
		}
	}
	
	
	
	
	/** 2016-10-1 add by wayne 
	 * 更新粉丝游戏分数  get方式提交  用于外部跨域访问
	 * */
	@SuppressWarnings("finally")
	@RequestMapping(value="/submitGamescore/{corpid}/{fansid}/{score}")
	@ResponseBody
	public String submitGamescore(ModelMap model, 
			HttpServletRequest request,
			@PathVariable java.lang.Long corpid,
			@PathVariable Long fansid,
			@PathVariable Integer score,
			HttpServletResponse response) throws Exception {
	
		response.setContentType("text/plain; charset=UTF-8");
		response.setCharacterEncoding("UTF-8");
	  
		Map<Object,Object> mapmsg = new HashMap<Object, Object>();
		String status="false";
		String msg="提交失败";
		String callback=request.getParameter("submitGamescore");  
		
		if(!chenckCorp(mapmsg, request, corpid)) {
			response.getWriter().print(callback + "({'status':'"+status+"','msg':'"+mapmsg.get("msg")+"'})");  
			return null;
		}
		
		//获取score
		if(CommonUtil.isNull(score)){
			msg="数据出错！";
			response.getWriter().print(callback + "({'status':'"+status+"','msg':'"+msg+"'})");  
			return null;
		}
		
		Tfans fans = this.tfansService.selectById(fansid);
		//Tfans fans= tfansManager.getById(fansid);
		if(fans==null){
			msg="数据出错！";
			response.getWriter().print(callback + "({'status':'"+status+"','msg':'"+msg+"'})");  
			return null;
		}
		
		try{
			//更新游戏分数
			if(fans.getScore()==null || fans.getScore()<score){
				fans.setHelpscore(fans.getHelpscore()==null?score:(fans.getHelpscore()+score-fans.getScore()));
				fans.setScore(score);
				//tfansManager.update(fans);
				this.tfansService.updateById(fans);
			}
			
			int myranking=0;
			int scoreranking=0;
			if(CommonUtil.isNotNull(fans.getShopid())){
				//获取自己的  助力人数名次
				//myranking=tfansManager.getMyRankingForNum(corpid, fans.getShopid(), fans.getHelpnum());
				myranking=this.tfansService.getMyRankingForNum(corpid, fans.getShopid(), fans.getHelpnum());
				//获取自己的 游戏分数名次
				//scoreranking=tfansManager.getMyRankingForCore(corpid,fans.getShopid(), fans.getHelpscore(), null);
				scoreranking =this.tfansService.getMyRankingForCore(corpid,fans.getShopid(), fans.getHelpscore(), null);
			}else{
				//获取自己的  助力人数名次
				myranking=this.tfansService.getMyRankingForNum(corpid, 0, fans.getHelpnum());
				//获取自己的 游戏分数名次
				scoreranking=this.tfansService.getMyRankingForCore(corpid,0, fans.getHelpscore(), null);
			}
			
			msg="提交成功";
			status="1";
			response.getWriter().print(callback + "({'status':'"+status+"','msg':'"+msg+"','myranking':'"+myranking+"','scoreranking':'"+scoreranking+"'})");    
			return null;   
		}catch (Exception e) {
			// TODO: handle exception
			response.getWriter().print(callback + "({'status':'"+status+"','msg':'"+msg+"'})");    
		}finally{
			return null;   
		}
	}
	
	
	
	/**
	 * 
	 * @param nickname
	 * @return
	 */
	public static String encodingCharset(String nickname) {
		if (StringUtils.isNoneBlank(nickname)) {
			try {
				if (nickname.equals(new String(nickname.getBytes("ISO8859-1"),
						"ISO8859-1"))) {
					nickname = new String(nickname.getBytes("ISO8859-1"),
							"UTF-8");
				}
			} catch (UnsupportedEncodingException ignore) {
			}
		}
		return nickname;
	}

	/**
	 * 
	 * @param corpid
	 * @param areaid
	 * @param positionid
	 * @param candidate
	 * @param idnumber
	 * @param mobile
	 * @param content
	 * @param remarks
	 * @param specialty
	 * @param grade
	 * @param school
	 * @param hail
	 * @param email
	 * @param type
	 * @param fansid
	 * @param age
	 *            年龄
	 * @param sex
	 *            性别
	 * @param education
	 *            最高学历
	 * @throws UnsupportedEncodingException
	 */
	private void saveTresume(java.lang.Long corpid, Long areaid,
			Long positionid, String candidate, String idnumber, String mobile,
			String content, String remarks, String specialty, String grade,
			String school, String hail, String email, String type,
			String fansid, Long age, String sex, String education)
			throws UnsupportedEncodingException {
		// 保存
		Tresume resume = new Tresume();
		resume.setCorpid(corpid);
		resume.setAreaid(Long.valueOf(areaid));
		resume.setPositionid(Long.valueOf(positionid));
		resume.setStatus(1);
		resume.setSchedule(1);

		// resume.setTinvtPosition(new TinvtPosition(Long.valueOf(positionid)));
		resume.setCandidate(candidate);
		resume.setMobile(mobile);
		resume.setIdnumber(idnumber);

		resume.setCreateDate(new Date());

		// 备用字段
		resume.setContent(content == null ? "" : content);
		resume.setRemarks(remarks == null ? "" : encodingCharset(remarks));
		resume.setSpecialty(specialty == null ? "" : specialty);
		resume.setGrade(grade == null ? "" : grade);
		resume.setSchool(school == null ? "" : school);
		resume.setHail(hail == null ? "" : hail);
		resume.setEmail(email == null ? "" : email);

		// 年龄性别最高学历
		resume.setAge(age);
		resume.setSex(sex);
		resume.setEducation(education);

		// 关联的粉丝id
		resume.setFansid(fansid == null ? null : Long.valueOf(fansid));
		if (StringUtils.isNotBlank(type)) {
			resume.setEducation(type);
		}

		this.tresumeService.insert(resume);
		// tresumeManager.save(resume);
	}
	
	

	/***
	 * 跨域检测企业账号信息
	**/
	private boolean chenckCorp(Map<Object,Object> mapmsg,HttpServletRequest request, java.lang.Long corpid) {
		Tcorp tcorp = this.tcorpService.selectById(corpid);
		if(null == tcorp){
			mapmsg.put("msg", "不存在此企业信息！");
			return false;
		}else{
			
			if(tcorp.getStatus() != 1){
		    	if(tcorp.getStatus()==2)
		    		mapmsg.put("msg","企业服务已被停用");
		    	else if(tcorp.getStatus()==3)
		    		mapmsg.put("msg","此企业账号已被锁定");
		    	else
		    		mapmsg.put("msg","此企业账号异常");

		    	return false;
			}else if(tcorp.getEnddate()!=null && CommonUtil.compareDay(tcorp.getEnddate(),new Date())==0){
				mapmsg.put("msg","企业服务已到期");
    			return false;
    		}
		}
		
		//检测是否微信浏览器
		String ua = ((HttpServletRequest) request).getHeader("user-agent").toLowerCase();
		if (ua.indexOf("micromessenger") > 0) {// 是微信浏览器
			return true;
		}else{
			mapmsg.put("msg","请使用微信访问!");
			return false;
		}
	}
	
	
	/** 2014-11-7 add by wayne
	 * 抽奖方法返回抽奖对象
	 * */
	private TlotteryPrize get_lotteryPrize(Long lotteryid) {
		//抽奖方法
		
		List<TlotteryPrize> prizeList = this.tlotteryPrizeService.getlistPrize(lotteryid);
		//List<TlotteryPrize> prizeList = tlotteryPrizeManager.getlistPrize(lotteryid);
		if(prizeList.size()>0){
			 List<Gift> gifts = new ArrayList<Gift>();
		    // 序号==物品Id==物品名称==概率
		    //gifts.add(new Gift(1, "P1", "物品1", 1d/100));
		    for (TlotteryPrize prize : prizeList) {
		    	 double probability = prize.getProbability()/100;
		    	 if (probability < 0) {
		    		 probability=0;
		    	 }
		    	 gifts.add(new Gift(prize.getLevel(), 
							prize.getLevel().toString(),
							prize.getName(), 
							probability));
			}
		    
		    List<Double> orignalRates = new ArrayList<Double>(gifts.size());
		    for (Gift gift : gifts) {
		        orignalRates.add(gift.getProbability());
		    }
		    
		    int levelIndex =-1;
		    levelIndex = LotteryUtil.lottery(orignalRates);
		    
		    if(levelIndex==-1) return null;
		    else return prizeList.get(levelIndex);
		}else {
			return null;
		}
	}
	
	
	
}
